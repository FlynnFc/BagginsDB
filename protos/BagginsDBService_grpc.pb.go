// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0--rc2
// source: protos/BagginsDBService.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BagginsDBService_JoinCluster_FullMethodName    = "/bagginsdb.BagginsDBService/JoinCluster"
	BagginsDBService_HandleRequest_FullMethodName  = "/bagginsdb.BagginsDBService/HandleRequest"
	BagginsDBService_ForwardRequest_FullMethodName = "/bagginsdb.BagginsDBService/ForwardRequest"
	BagginsDBService_HeartBeat_FullMethodName      = "/bagginsdb.BagginsDBService/HeartBeat"
)

// BagginsDBServiceClient is the client API for BagginsDBService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The service exposed by each node in the cluster.
type BagginsDBServiceClient interface {
	// Called by a new node to join the cluster.
	JoinCluster(ctx context.Context, in *JoinClusterRequest, opts ...grpc.CallOption) (*JoinClusterResponse, error)
	// Used by clients to send read/write requests.
	// The node receiving this request will determine if it is responsible;
	// if not, it can forward the request to the correct node.
	HandleRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// Used by nodes to forward requests that do not belong to them.
	ForwardRequest(ctx context.Context, in *ForwardedRequest, opts ...grpc.CallOption) (*Response, error)
	// Basic health check to verify node liveness.
	HeartBeat(ctx context.Context, in *HealthCheck, opts ...grpc.CallOption) (*Response, error)
}

type bagginsDBServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBagginsDBServiceClient(cc grpc.ClientConnInterface) BagginsDBServiceClient {
	return &bagginsDBServiceClient{cc}
}

func (c *bagginsDBServiceClient) JoinCluster(ctx context.Context, in *JoinClusterRequest, opts ...grpc.CallOption) (*JoinClusterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinClusterResponse)
	err := c.cc.Invoke(ctx, BagginsDBService_JoinCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bagginsDBServiceClient) HandleRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, BagginsDBService_HandleRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bagginsDBServiceClient) ForwardRequest(ctx context.Context, in *ForwardedRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, BagginsDBService_ForwardRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bagginsDBServiceClient) HeartBeat(ctx context.Context, in *HealthCheck, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, BagginsDBService_HeartBeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BagginsDBServiceServer is the server API for BagginsDBService service.
// All implementations must embed UnimplementedBagginsDBServiceServer
// for forward compatibility.
//
// The service exposed by each node in the cluster.
type BagginsDBServiceServer interface {
	// Called by a new node to join the cluster.
	JoinCluster(context.Context, *JoinClusterRequest) (*JoinClusterResponse, error)
	// Used by clients to send read/write requests.
	// The node receiving this request will determine if it is responsible;
	// if not, it can forward the request to the correct node.
	HandleRequest(context.Context, *Request) (*Response, error)
	// Used by nodes to forward requests that do not belong to them.
	ForwardRequest(context.Context, *ForwardedRequest) (*Response, error)
	// Basic health check to verify node liveness.
	HeartBeat(context.Context, *HealthCheck) (*Response, error)
	mustEmbedUnimplementedBagginsDBServiceServer()
}

// UnimplementedBagginsDBServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBagginsDBServiceServer struct{}

func (UnimplementedBagginsDBServiceServer) JoinCluster(context.Context, *JoinClusterRequest) (*JoinClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinCluster not implemented")
}
func (UnimplementedBagginsDBServiceServer) HandleRequest(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleRequest not implemented")
}
func (UnimplementedBagginsDBServiceServer) ForwardRequest(context.Context, *ForwardedRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardRequest not implemented")
}
func (UnimplementedBagginsDBServiceServer) HeartBeat(context.Context, *HealthCheck) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeartBeat not implemented")
}
func (UnimplementedBagginsDBServiceServer) mustEmbedUnimplementedBagginsDBServiceServer() {}
func (UnimplementedBagginsDBServiceServer) testEmbeddedByValue()                          {}

// UnsafeBagginsDBServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BagginsDBServiceServer will
// result in compilation errors.
type UnsafeBagginsDBServiceServer interface {
	mustEmbedUnimplementedBagginsDBServiceServer()
}

func RegisterBagginsDBServiceServer(s grpc.ServiceRegistrar, srv BagginsDBServiceServer) {
	// If the following call pancis, it indicates UnimplementedBagginsDBServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BagginsDBService_ServiceDesc, srv)
}

func _BagginsDBService_JoinCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BagginsDBServiceServer).JoinCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BagginsDBService_JoinCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BagginsDBServiceServer).JoinCluster(ctx, req.(*JoinClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BagginsDBService_HandleRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BagginsDBServiceServer).HandleRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BagginsDBService_HandleRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BagginsDBServiceServer).HandleRequest(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _BagginsDBService_ForwardRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForwardedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BagginsDBServiceServer).ForwardRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BagginsDBService_ForwardRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BagginsDBServiceServer).ForwardRequest(ctx, req.(*ForwardedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BagginsDBService_HeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BagginsDBServiceServer).HeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BagginsDBService_HeartBeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BagginsDBServiceServer).HeartBeat(ctx, req.(*HealthCheck))
	}
	return interceptor(ctx, in, info, handler)
}

// BagginsDBService_ServiceDesc is the grpc.ServiceDesc for BagginsDBService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BagginsDBService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bagginsdb.BagginsDBService",
	HandlerType: (*BagginsDBServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinCluster",
			Handler:    _BagginsDBService_JoinCluster_Handler,
		},
		{
			MethodName: "HandleRequest",
			Handler:    _BagginsDBService_HandleRequest_Handler,
		},
		{
			MethodName: "ForwardRequest",
			Handler:    _BagginsDBService_ForwardRequest_Handler,
		},
		{
			MethodName: "HeartBeat",
			Handler:    _BagginsDBService_HeartBeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/BagginsDBService.proto",
}
